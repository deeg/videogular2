"use strict";
var vg_overlay_play_1 = require("./vg-overlay-play");
var vg_api_1 = require("../services/vg-api");
var vg_states_1 = require("../states/vg-states");
describe('Videogular Player', function () {
    var overlayPlay;
    var ref;
    var api;
    beforeEach(function () {
        ref = {
            nativeElement: {
                getAttribute: function (name) {
                    return name;
                }
            }
        };
        api = new vg_api_1.VgAPI();
        overlayPlay = new vg_overlay_play_1.VgOverlayPlay(ref, api);
    });
    it('Should get media by id on init', function () {
        spyOn(overlayPlay.elem, 'getAttribute').and.callThrough();
        spyOn(api, 'getMediaById').and.callFake(function () { });
        overlayPlay.ngOnInit();
        expect(overlayPlay.elem.getAttribute).toHaveBeenCalledWith('vg-for');
        expect(api.getMediaById).toHaveBeenCalledWith('vg-for');
    });
    describe('onClick', function () {
        beforeEach(function () {
            overlayPlay.target = {
                play: function () { },
                pause: function () { }
            };
        });
        it('current state play should set target to pause', function () {
            spyOn(overlayPlay, 'getState').and.callFake(function () { return vg_states_1.VgStates.VG_PLAYING; });
            spyOn(overlayPlay.target, 'pause');
            overlayPlay.onClick();
            expect(overlayPlay.getState).toHaveBeenCalled();
            expect(overlayPlay.target.pause).toHaveBeenCalled();
        });
        it('current state pause should set target to play', function () {
            spyOn(overlayPlay, 'getState').and.callFake(function () { return vg_states_1.VgStates.VG_PAUSED; });
            spyOn(overlayPlay.target, 'play');
            overlayPlay.onClick();
            expect(overlayPlay.getState).toHaveBeenCalled();
            expect(overlayPlay.target.play).toHaveBeenCalled();
        });
    });
    describe('getState', function () {
        beforeEach(function () {
            overlayPlay.target = {
                state: null
            };
        });
        it('if only one state returns that state', function () {
            overlayPlay.target.state = vg_states_1.VgStates.VG_PAUSED;
            expect(overlayPlay.getState()).toEqual(vg_states_1.VgStates.VG_PAUSED);
        });
        it('if more than one target should return pause if all of them are pause', function () {
            overlayPlay.target.state = [
                vg_states_1.VgStates.VG_PAUSED,
                vg_states_1.VgStates.VG_PAUSED,
                vg_states_1.VgStates.VG_PAUSED,
                vg_states_1.VgStates.VG_PAUSED
            ];
            expect(overlayPlay.getState()).toEqual(vg_states_1.VgStates.VG_PAUSED);
        });
        it('if more than one target should return play if any of them is play', function () {
            overlayPlay.target.state = [
                vg_states_1.VgStates.VG_PAUSED,
                vg_states_1.VgStates.VG_PLAYING,
                vg_states_1.VgStates.VG_PAUSED,
                vg_states_1.VgStates.VG_PAUSED
            ];
            expect(overlayPlay.getState()).toEqual(vg_states_1.VgStates.VG_PLAYING);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctb3ZlcmxheS1wbGF5LnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2Zy1vdmVybGF5LXBsYXkuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsZ0NBQTRCLG1CQUFtQixDQUFDLENBQUE7QUFDaEQsdUJBQW9CLG9CQUFvQixDQUFDLENBQUE7QUFFekMsMEJBQXVCLHFCQUFxQixDQUFDLENBQUE7QUFFN0MsUUFBUSxDQUFDLG1CQUFtQixFQUFFO0lBQzFCLElBQUksV0FBMEIsQ0FBQztJQUMvQixJQUFJLEdBQWMsQ0FBQztJQUNuQixJQUFJLEdBQVMsQ0FBQztJQUVkLFVBQVUsQ0FBQztRQUNQLEdBQUcsR0FBRztZQUNGLGFBQWEsRUFBRTtnQkFDWCxZQUFZLEVBQUUsVUFBQyxJQUFJO29CQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ2hCLENBQUM7YUFDSjtTQUNKLENBQUM7UUFFRixHQUFHLEdBQUcsSUFBSSxjQUFLLEVBQUUsQ0FBQztRQUNsQixXQUFXLEdBQUcsSUFBSSwrQkFBYSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRTtRQUNqQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDMUQsS0FBSyxDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQVEsQ0FBQyxDQUFDLENBQUM7UUFFbkQsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRXZCLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDNUQsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsU0FBUyxFQUFFO1FBQ2hCLFVBQVUsQ0FBQztZQUNQLFdBQVcsQ0FBQyxNQUFNLEdBQUc7Z0JBQ2pCLElBQUksRUFBRSxjQUFRLENBQUM7Z0JBQ2YsS0FBSyxFQUFFLGNBQVEsQ0FBQzthQUNuQixDQUFBO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsK0NBQStDLEVBQUU7WUFDaEQsS0FBSyxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQVEsTUFBTSxDQUFDLG9CQUFRLENBQUMsVUFBVSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEYsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFbkMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRXRCLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUNoRCxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3hELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLCtDQUErQyxFQUFFO1lBQ2hELEtBQUssQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFRLE1BQU0sQ0FBQyxvQkFBUSxDQUFDLFNBQVMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pGLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRWxDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUV0QixNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDaEQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFVBQVUsRUFBRTtRQUNqQixVQUFVLENBQUM7WUFDUCxXQUFXLENBQUMsTUFBTSxHQUFHO2dCQUNqQixLQUFLLEVBQUUsSUFBSTthQUNkLENBQUE7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRTtZQUN2QyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxvQkFBUSxDQUFDLFNBQVMsQ0FBQztZQUU5QyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLG9CQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsc0VBQXNFLEVBQUU7WUFDdkUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUc7Z0JBQ3ZCLG9CQUFRLENBQUMsU0FBUztnQkFDbEIsb0JBQVEsQ0FBQyxTQUFTO2dCQUNsQixvQkFBUSxDQUFDLFNBQVM7Z0JBQ2xCLG9CQUFRLENBQUMsU0FBUzthQUNyQixDQUFDO1lBRUYsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxvQkFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLG1FQUFtRSxFQUFFO1lBQ3BFLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHO2dCQUN2QixvQkFBUSxDQUFDLFNBQVM7Z0JBQ2xCLG9CQUFRLENBQUMsVUFBVTtnQkFDbkIsb0JBQVEsQ0FBQyxTQUFTO2dCQUNsQixvQkFBUSxDQUFDLFNBQVM7YUFDckIsQ0FBQztZQUVGLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsb0JBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNoRSxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1ZnT3ZlcmxheVBsYXl9IGZyb20gXCIuL3ZnLW92ZXJsYXktcGxheVwiO1xuaW1wb3J0IHtWZ0FQSX0gZnJvbSBcIi4uL3NlcnZpY2VzL3ZnLWFwaVwiO1xuaW1wb3J0IHtFbGVtZW50UmVmfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtWZ1N0YXRlc30gZnJvbSBcIi4uL3N0YXRlcy92Zy1zdGF0ZXNcIjtcblxuZGVzY3JpYmUoJ1ZpZGVvZ3VsYXIgUGxheWVyJywgKCkgPT4ge1xuICAgIGxldCBvdmVybGF5UGxheTogVmdPdmVybGF5UGxheTtcbiAgICBsZXQgcmVmOkVsZW1lbnRSZWY7XG4gICAgbGV0IGFwaTpWZ0FQSTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICByZWYgPSB7XG4gICAgICAgICAgICBuYXRpdmVFbGVtZW50OiB7XG4gICAgICAgICAgICAgICAgZ2V0QXR0cmlidXRlOiAobmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgYXBpID0gbmV3IFZnQVBJKCk7XG4gICAgICAgIG92ZXJsYXlQbGF5ID0gbmV3IFZnT3ZlcmxheVBsYXkocmVmLCBhcGkpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBnZXQgbWVkaWEgYnkgaWQgb24gaW5pdCcsICgpID0+IHtcbiAgICAgICAgc3B5T24ob3ZlcmxheVBsYXkuZWxlbSwgJ2dldEF0dHJpYnV0ZScpLmFuZC5jYWxsVGhyb3VnaCgpO1xuICAgICAgICBzcHlPbihhcGksICdnZXRNZWRpYUJ5SWQnKS5hbmQuY2FsbEZha2UoKCkgPT4geyB9KTtcblxuICAgICAgICBvdmVybGF5UGxheS5uZ09uSW5pdCgpO1xuXG4gICAgICAgIGV4cGVjdChvdmVybGF5UGxheS5lbGVtLmdldEF0dHJpYnV0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3ZnLWZvcicpO1xuICAgICAgICBleHBlY3QoYXBpLmdldE1lZGlhQnlJZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3ZnLWZvcicpO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ29uQ2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgb3ZlcmxheVBsYXkudGFyZ2V0ID0ge1xuICAgICAgICAgICAgICAgIHBsYXk6ICgpID0+IHsgfSxcbiAgICAgICAgICAgICAgICBwYXVzZTogKCkgPT4geyB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdjdXJyZW50IHN0YXRlIHBsYXkgc2hvdWxkIHNldCB0YXJnZXQgdG8gcGF1c2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBzcHlPbihvdmVybGF5UGxheSwgJ2dldFN0YXRlJykuYW5kLmNhbGxGYWtlKCgpID0+IHsgcmV0dXJuIFZnU3RhdGVzLlZHX1BMQVlJTkcgfSk7XG4gICAgICAgICAgICBzcHlPbihvdmVybGF5UGxheS50YXJnZXQsICdwYXVzZScpO1xuXG4gICAgICAgICAgICBvdmVybGF5UGxheS5vbkNsaWNrKCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChvdmVybGF5UGxheS5nZXRTdGF0ZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICAgICAgZXhwZWN0KG92ZXJsYXlQbGF5LnRhcmdldC5wYXVzZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnY3VycmVudCBzdGF0ZSBwYXVzZSBzaG91bGQgc2V0IHRhcmdldCB0byBwbGF5JywgKCkgPT4ge1xuICAgICAgICAgICAgc3B5T24ob3ZlcmxheVBsYXksICdnZXRTdGF0ZScpLmFuZC5jYWxsRmFrZSgoKSA9PiB7IHJldHVybiBWZ1N0YXRlcy5WR19QQVVTRUQgfSk7XG4gICAgICAgICAgICBzcHlPbihvdmVybGF5UGxheS50YXJnZXQsICdwbGF5Jyk7XG5cbiAgICAgICAgICAgIG92ZXJsYXlQbGF5Lm9uQ2xpY2soKTtcblxuICAgICAgICAgICAgZXhwZWN0KG92ZXJsYXlQbGF5LmdldFN0YXRlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgICAgICBleHBlY3Qob3ZlcmxheVBsYXkudGFyZ2V0LnBsYXkpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnZ2V0U3RhdGUnLCAoKSA9PiB7XG4gICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgb3ZlcmxheVBsYXkudGFyZ2V0ID0ge1xuICAgICAgICAgICAgICAgIHN0YXRlOiBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdpZiBvbmx5IG9uZSBzdGF0ZSByZXR1cm5zIHRoYXQgc3RhdGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBvdmVybGF5UGxheS50YXJnZXQuc3RhdGUgPSBWZ1N0YXRlcy5WR19QQVVTRUQ7XG5cbiAgICAgICAgICAgIGV4cGVjdChvdmVybGF5UGxheS5nZXRTdGF0ZSgpKS50b0VxdWFsKFZnU3RhdGVzLlZHX1BBVVNFRCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdpZiBtb3JlIHRoYW4gb25lIHRhcmdldCBzaG91bGQgcmV0dXJuIHBhdXNlIGlmIGFsbCBvZiB0aGVtIGFyZSBwYXVzZScsICgpID0+IHtcbiAgICAgICAgICAgIG92ZXJsYXlQbGF5LnRhcmdldC5zdGF0ZSA9IFtcbiAgICAgICAgICAgICAgICBWZ1N0YXRlcy5WR19QQVVTRUQsXG4gICAgICAgICAgICAgICAgVmdTdGF0ZXMuVkdfUEFVU0VELFxuICAgICAgICAgICAgICAgIFZnU3RhdGVzLlZHX1BBVVNFRCxcbiAgICAgICAgICAgICAgICBWZ1N0YXRlcy5WR19QQVVTRURcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIGV4cGVjdChvdmVybGF5UGxheS5nZXRTdGF0ZSgpKS50b0VxdWFsKFZnU3RhdGVzLlZHX1BBVVNFRCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdpZiBtb3JlIHRoYW4gb25lIHRhcmdldCBzaG91bGQgcmV0dXJuIHBsYXkgaWYgYW55IG9mIHRoZW0gaXMgcGxheScsICgpID0+IHtcbiAgICAgICAgICAgIG92ZXJsYXlQbGF5LnRhcmdldC5zdGF0ZSA9IFtcbiAgICAgICAgICAgICAgICBWZ1N0YXRlcy5WR19QQVVTRUQsXG4gICAgICAgICAgICAgICAgVmdTdGF0ZXMuVkdfUExBWUlORyxcbiAgICAgICAgICAgICAgICBWZ1N0YXRlcy5WR19QQVVTRUQsXG4gICAgICAgICAgICAgICAgVmdTdGF0ZXMuVkdfUEFVU0VEXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICBleHBlY3Qob3ZlcmxheVBsYXkuZ2V0U3RhdGUoKSkudG9FcXVhbChWZ1N0YXRlcy5WR19QTEFZSU5HKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==
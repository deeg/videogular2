"use strict";
var vg_controls_1 = require("./vg-controls");
var vg_api_1 = require("../services/vg-api");
var Observable_1 = require("rxjs/Observable");
describe('Controls Bar', function () {
    var controls;
    var ref;
    var api;
    beforeEach(function () {
        jasmine.clock().uninstall();
        jasmine.clock().install();
        api = new vg_api_1.VgAPI();
        ref = {
            nativeElement: {
                getAttribute: function (name) {
                    return name;
                }
            }
        };
        controls = new vg_controls_1.VgControls(api, ref);
    });
    afterEach(function () {
        jasmine.clock().uninstall();
    });
    it('Should have been defined', function () {
        expect(controls).toBeTruthy();
    });
    it('Should listen for mouseenter and mouseleave events', function () {
        spyOn(Observable_1.Observable, 'fromEvent').and.callThrough();
        var vgElem = document.createElement('vg-player');
        api.registerElement(vgElem);
        controls.ngOnInit();
        expect(Observable_1.Observable.fromEvent).toHaveBeenCalledWith(api.videogularElement, 'mouseenter');
        expect(Observable_1.Observable.fromEvent).toHaveBeenCalledWith(api.videogularElement, 'mouseleave');
    });
    it('Should hide controls after view init', function () {
        spyOn(controls, 'hide').and.callFake(function () { });
        controls.autohide = true;
        controls.ngAfterViewInit();
        expect(controls.hide).toHaveBeenCalled();
    });
    it('Should show controls after view init', function () {
        spyOn(controls, 'show').and.callFake(function () { });
        controls.autohide = false;
        controls.ngAfterViewInit();
        expect(controls.show).toHaveBeenCalled();
    });
    it('Should show controls', function () {
        spyOn(window, 'clearTimeout').and.callFake(function () { });
        controls.show();
        expect(window.clearTimeout).toHaveBeenCalled();
        expect(controls.hideControls).toBe(false);
    });
    it('Should hide controls', function () {
        controls.autohide = true;
        controls.hide();
        jasmine.clock().tick(3100);
        expect(controls.hideControls).toBe(true);
    });
    it('Should not hide controls', function () {
        controls.hideControls = false;
        controls.autohide = false;
        controls.hide();
        jasmine.clock().tick(3100);
        expect(controls.hideControls).toBe(false);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctY29udHJvbHMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInZnLWNvbnRyb2xzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRCQUF5QixlQUFlLENBQUMsQ0FBQTtBQUV6Qyx1QkFBb0Isb0JBQW9CLENBQUMsQ0FBQTtBQUN6QywyQkFBeUIsaUJBQWlCLENBQUMsQ0FBQTtBQUUzQyxRQUFRLENBQUMsY0FBYyxFQUFFO0lBQ3JCLElBQUksUUFBbUIsQ0FBQztJQUN4QixJQUFJLEdBQWMsQ0FBQztJQUNuQixJQUFJLEdBQVMsQ0FBQztJQUVkLFVBQVUsQ0FBQztRQUNQLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUM1QixPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFMUIsR0FBRyxHQUFHLElBQUksY0FBSyxFQUFFLENBQUM7UUFFbEIsR0FBRyxHQUFHO1lBQ0YsYUFBYSxFQUFFO2dCQUNYLFlBQVksRUFBRSxVQUFDLElBQUk7b0JBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQztnQkFDaEIsQ0FBQzthQUNKO1NBQ0osQ0FBQztRQUVGLFFBQVEsR0FBRyxJQUFJLHdCQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDO1FBQ04sT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDBCQUEwQixFQUFFO1FBQzNCLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvREFBb0QsRUFBRTtRQUNyRCxLQUFLLENBQUMsdUJBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFakQsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVqRCxHQUFHLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTVCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVwQixNQUFNLENBQUMsdUJBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDdkYsTUFBTSxDQUFDLHVCQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzNGLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHNDQUFzQyxFQUFFO1FBQ3ZDLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFPLENBQUMsQ0FBQyxDQUFDO1FBRS9DLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBRXpCLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUUzQixNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsc0NBQXNDLEVBQUU7UUFDdkMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQU8sQ0FBQyxDQUFDLENBQUM7UUFFL0MsUUFBUSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFFMUIsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRTNCLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUM3QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxzQkFBc0IsRUFBRTtRQUN2QixLQUFLLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBTyxDQUFDLENBQUMsQ0FBQztRQUVyRCxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFaEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHNCQUFzQixFQUFFO1FBQ3ZCLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBRXpCLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVoQixPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDBCQUEwQixFQUFFO1FBQzNCLFFBQVEsQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzlCLFFBQVEsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBRTFCLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVoQixPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1ZnQ29udHJvbHN9IGZyb20gXCIuL3ZnLWNvbnRyb2xzXCI7XG5pbXBvcnQge0VsZW1lbnRSZWZ9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQge1ZnQVBJfSBmcm9tIFwiLi4vc2VydmljZXMvdmctYXBpXCI7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gXCJyeGpzL09ic2VydmFibGVcIjtcblxuZGVzY3JpYmUoJ0NvbnRyb2xzIEJhcicsICgpID0+IHtcbiAgICBsZXQgY29udHJvbHM6VmdDb250cm9scztcbiAgICBsZXQgcmVmOkVsZW1lbnRSZWY7XG4gICAgbGV0IGFwaTpWZ0FQSTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBqYXNtaW5lLmNsb2NrKCkudW5pbnN0YWxsKCk7XG4gICAgICAgIGphc21pbmUuY2xvY2soKS5pbnN0YWxsKCk7XG5cbiAgICAgICAgYXBpID0gbmV3IFZnQVBJKCk7XG5cbiAgICAgICAgcmVmID0ge1xuICAgICAgICAgICAgbmF0aXZlRWxlbWVudDoge1xuICAgICAgICAgICAgICAgIGdldEF0dHJpYnV0ZTogKG5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnRyb2xzID0gbmV3IFZnQ29udHJvbHMoYXBpLCByZWYpO1xuICAgIH0pO1xuXG4gICAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgICAgamFzbWluZS5jbG9jaygpLnVuaW5zdGFsbCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBoYXZlIGJlZW4gZGVmaW5lZCcsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGNvbnRyb2xzKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnU2hvdWxkIGxpc3RlbiBmb3IgbW91c2VlbnRlciBhbmQgbW91c2VsZWF2ZSBldmVudHMnLCAoKSA9PiB7XG4gICAgICAgIHNweU9uKE9ic2VydmFibGUsICdmcm9tRXZlbnQnKS5hbmQuY2FsbFRocm91Z2goKTtcblxuICAgICAgICB2YXIgdmdFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmctcGxheWVyJyk7XG5cbiAgICAgICAgYXBpLnJlZ2lzdGVyRWxlbWVudCh2Z0VsZW0pO1xuXG4gICAgICAgIGNvbnRyb2xzLm5nT25Jbml0KCk7XG5cbiAgICAgICAgZXhwZWN0KE9ic2VydmFibGUuZnJvbUV2ZW50KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChhcGkudmlkZW9ndWxhckVsZW1lbnQsICdtb3VzZWVudGVyJyk7XG4gICAgICAgIGV4cGVjdChPYnNlcnZhYmxlLmZyb21FdmVudCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoYXBpLnZpZGVvZ3VsYXJFbGVtZW50LCAnbW91c2VsZWF2ZScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBoaWRlIGNvbnRyb2xzIGFmdGVyIHZpZXcgaW5pdCcsICgpID0+IHtcbiAgICAgICAgc3B5T24oY29udHJvbHMsICdoaWRlJykuYW5kLmNhbGxGYWtlKCgpID0+IHt9KTtcblxuICAgICAgICBjb250cm9scy5hdXRvaGlkZSA9IHRydWU7XG5cbiAgICAgICAgY29udHJvbHMubmdBZnRlclZpZXdJbml0KCk7XG5cbiAgICAgICAgZXhwZWN0KGNvbnRyb2xzLmhpZGUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgc2hvdyBjb250cm9scyBhZnRlciB2aWV3IGluaXQnLCAoKSA9PiB7XG4gICAgICAgIHNweU9uKGNvbnRyb2xzLCAnc2hvdycpLmFuZC5jYWxsRmFrZSgoKSA9PiB7fSk7XG5cbiAgICAgICAgY29udHJvbHMuYXV0b2hpZGUgPSBmYWxzZTtcblxuICAgICAgICBjb250cm9scy5uZ0FmdGVyVmlld0luaXQoKTtcblxuICAgICAgICBleHBlY3QoY29udHJvbHMuc2hvdykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBzaG93IGNvbnRyb2xzJywgKCkgPT4ge1xuICAgICAgICBzcHlPbih3aW5kb3csICdjbGVhclRpbWVvdXQnKS5hbmQuY2FsbEZha2UoKCkgPT4ge30pO1xuXG4gICAgICAgIGNvbnRyb2xzLnNob3coKTtcblxuICAgICAgICBleHBlY3Qod2luZG93LmNsZWFyVGltZW91dCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICBleHBlY3QoY29udHJvbHMuaGlkZUNvbnRyb2xzKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgaGlkZSBjb250cm9scycsICgpID0+IHtcbiAgICAgICAgY29udHJvbHMuYXV0b2hpZGUgPSB0cnVlO1xuXG4gICAgICAgIGNvbnRyb2xzLmhpZGUoKTtcblxuICAgICAgICBqYXNtaW5lLmNsb2NrKCkudGljaygzMTAwKTtcbiAgICAgICAgZXhwZWN0KGNvbnRyb2xzLmhpZGVDb250cm9scykudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgbm90IGhpZGUgY29udHJvbHMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnRyb2xzLmhpZGVDb250cm9scyA9IGZhbHNlO1xuICAgICAgICBjb250cm9scy5hdXRvaGlkZSA9IGZhbHNlO1xuXG4gICAgICAgIGNvbnRyb2xzLmhpZGUoKTtcblxuICAgICAgICBqYXNtaW5lLmNsb2NrKCkudGljaygzMTAwKTtcbiAgICAgICAgZXhwZWN0KGNvbnRyb2xzLmhpZGVDb250cm9scykudG9CZShmYWxzZSk7XG4gICAgfSk7XG59KTtcbiJdfQ==
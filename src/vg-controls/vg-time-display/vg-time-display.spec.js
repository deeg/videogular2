"use strict";
var vg_time_display_1 = require("./vg-time-display");
var vg_api_1 = require("../../services/vg-api");
describe('Time Display', function () {
    var timeDisplay;
    var ref;
    var api;
    var renderer;
    beforeEach(function () {
        api = new vg_api_1.VgAPI();
        ref = {
            nativeElement: {
                getAttribute: function (name) {
                    return name;
                }
            }
        };
        renderer = {
            setElementClass: function () { }
        };
        timeDisplay = new vg_time_display_1.VgTimeDisplay(ref, api);
    });
    it('Should have been defined', function () {
        expect(timeDisplay).toBeTruthy();
    });
    it('Should be initialized', function () {
        spyOn(timeDisplay.elem, 'getAttribute').and.callThrough();
        spyOn(api, 'getMediaById').and.callFake(function () { return ref.nativeElement; });
        timeDisplay.onPlayerReady();
        expect(timeDisplay.elem.getAttribute).toHaveBeenCalledWith('vg-for');
        expect(api.getMediaById).toHaveBeenCalledWith('vg-for');
        expect(timeDisplay.vgFor).toBe('vg-for');
        expect(timeDisplay.target).toBe(ref.nativeElement);
    });
    describe('getTime', function () {
        it('should return 0 when no target defined', function () {
            expect(timeDisplay.getTime()).toBe(0);
        });
        it('should return 0 when target and its property cannot be evaluated to number', function () {
            timeDisplay.property = "something";
            timeDisplay.target = {
                time: {
                    "something": "abcd"
                }
            };
            expect(timeDisplay.getTime()).toBe(0);
        });
        it('should return a rounded number when target and its property can be evaluated to number', function () {
            timeDisplay.property = "something";
            timeDisplay.target = {
                time: {
                    "something": 5.3
                }
            };
            expect(timeDisplay.getTime()).toBe(5);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctdGltZS1kaXNwbGF5LnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2Zy10aW1lLWRpc3BsYXkuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsZ0NBQTRCLG1CQUFtQixDQUFDLENBQUE7QUFFaEQsdUJBQW9CLHVCQUF1QixDQUFDLENBQUE7QUFFNUMsUUFBUSxDQUFDLGNBQWMsRUFBRTtJQUNyQixJQUFJLFdBQXlCLENBQUM7SUFDOUIsSUFBSSxHQUFjLENBQUM7SUFDbkIsSUFBSSxHQUFTLENBQUM7SUFDZCxJQUFJLFFBQVEsQ0FBQztJQUViLFVBQVUsQ0FBQztRQUNQLEdBQUcsR0FBRyxJQUFJLGNBQUssRUFBRSxDQUFDO1FBRWxCLEdBQUcsR0FBRztZQUNGLGFBQWEsRUFBRTtnQkFDWCxZQUFZLEVBQUUsVUFBQyxJQUFJO29CQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ2hCLENBQUM7YUFDSjtTQUNKLENBQUM7UUFFRixRQUFRLEdBQUc7WUFDUCxlQUFlLEVBQUUsY0FBTyxDQUFDO1NBQzVCLENBQUM7UUFFRixXQUFXLEdBQUcsSUFBSSwrQkFBYSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywwQkFBMEIsRUFBRTtRQUMzQixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDckMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsdUJBQXVCLEVBQUU7UUFDeEIsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzFELEtBQUssQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFRLE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFN0UsV0FBVyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRTVCLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDekMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFNBQVMsRUFBRTtRQUNoQixFQUFFLENBQUMsd0NBQXdDLEVBQUU7WUFDekMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyw0RUFBNEUsRUFBRTtZQUM3RSxXQUFXLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQztZQUNuQyxXQUFXLENBQUMsTUFBTSxHQUFHO2dCQUNqQixJQUFJLEVBQUU7b0JBQ0YsV0FBVyxFQUFFLE1BQU07aUJBQ3RCO2FBQ0osQ0FBQztZQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsd0ZBQXdGLEVBQUU7WUFDekYsV0FBVyxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUM7WUFDbkMsV0FBVyxDQUFDLE1BQU0sR0FBRztnQkFDakIsSUFBSSxFQUFFO29CQUNGLFdBQVcsRUFBRSxHQUFHO2lCQUNuQjthQUNKLENBQUM7WUFDRixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VmdUaW1lRGlzcGxheX0gZnJvbSBcIi4vdmctdGltZS1kaXNwbGF5XCI7XG5pbXBvcnQge0VsZW1lbnRSZWZ9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQge1ZnQVBJfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvdmctYXBpXCI7XG5cbmRlc2NyaWJlKCdUaW1lIERpc3BsYXknLCAoKSA9PiB7XG4gICAgbGV0IHRpbWVEaXNwbGF5OlZnVGltZURpc3BsYXk7XG4gICAgbGV0IHJlZjpFbGVtZW50UmVmO1xuICAgIGxldCBhcGk6VmdBUEk7XG4gICAgbGV0IHJlbmRlcmVyO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIGFwaSA9IG5ldyBWZ0FQSSgpO1xuXG4gICAgICAgIHJlZiA9IHtcbiAgICAgICAgICAgIG5hdGl2ZUVsZW1lbnQ6IHtcbiAgICAgICAgICAgICAgICBnZXRBdHRyaWJ1dGU6IChuYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZW5kZXJlciA9IHtcbiAgICAgICAgICAgIHNldEVsZW1lbnRDbGFzczogKCkgPT4ge31cbiAgICAgICAgfTtcblxuICAgICAgICB0aW1lRGlzcGxheSA9IG5ldyBWZ1RpbWVEaXNwbGF5KHJlZiwgYXBpKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgaGF2ZSBiZWVuIGRlZmluZWQnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdCh0aW1lRGlzcGxheSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBiZSBpbml0aWFsaXplZCcsICgpID0+IHtcbiAgICAgICAgc3B5T24odGltZURpc3BsYXkuZWxlbSwgJ2dldEF0dHJpYnV0ZScpLmFuZC5jYWxsVGhyb3VnaCgpO1xuICAgICAgICBzcHlPbihhcGksICdnZXRNZWRpYUJ5SWQnKS5hbmQuY2FsbEZha2UoKCkgPT4geyByZXR1cm4gcmVmLm5hdGl2ZUVsZW1lbnQ7IH0pO1xuXG4gICAgICAgIHRpbWVEaXNwbGF5Lm9uUGxheWVyUmVhZHkoKTtcblxuICAgICAgICBleHBlY3QodGltZURpc3BsYXkuZWxlbS5nZXRBdHRyaWJ1dGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd2Zy1mb3InKTtcbiAgICAgICAgZXhwZWN0KGFwaS5nZXRNZWRpYUJ5SWQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd2Zy1mb3InKTtcbiAgICAgICAgZXhwZWN0KHRpbWVEaXNwbGF5LnZnRm9yKS50b0JlKCd2Zy1mb3InKTtcbiAgICAgICAgZXhwZWN0KHRpbWVEaXNwbGF5LnRhcmdldCkudG9CZShyZWYubmF0aXZlRWxlbWVudCk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnZ2V0VGltZScsICgpID0+IHtcbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gMCB3aGVuIG5vIHRhcmdldCBkZWZpbmVkJywgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KHRpbWVEaXNwbGF5LmdldFRpbWUoKSkudG9CZSgwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIDAgd2hlbiB0YXJnZXQgYW5kIGl0cyBwcm9wZXJ0eSBjYW5ub3QgYmUgZXZhbHVhdGVkIHRvIG51bWJlcicsICgpID0+IHtcbiAgICAgICAgICAgIHRpbWVEaXNwbGF5LnByb3BlcnR5ID0gXCJzb21ldGhpbmdcIjtcbiAgICAgICAgICAgIHRpbWVEaXNwbGF5LnRhcmdldCA9IHtcbiAgICAgICAgICAgICAgICB0aW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIFwic29tZXRoaW5nXCI6IFwiYWJjZFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGV4cGVjdCh0aW1lRGlzcGxheS5nZXRUaW1lKCkpLnRvQmUoMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhIHJvdW5kZWQgbnVtYmVyIHdoZW4gdGFyZ2V0IGFuZCBpdHMgcHJvcGVydHkgY2FuIGJlIGV2YWx1YXRlZCB0byBudW1iZXInLCAoKSA9PiB7XG4gICAgICAgICAgICB0aW1lRGlzcGxheS5wcm9wZXJ0eSA9IFwic29tZXRoaW5nXCI7XG4gICAgICAgICAgICB0aW1lRGlzcGxheS50YXJnZXQgPSB7XG4gICAgICAgICAgICAgICAgdGltZToge1xuICAgICAgICAgICAgICAgICAgICBcInNvbWV0aGluZ1wiOiA1LjNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZXhwZWN0KHRpbWVEaXNwbGF5LmdldFRpbWUoKSkudG9CZSg1KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==
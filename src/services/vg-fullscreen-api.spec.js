"use strict";
var core_1 = require("@angular/core");
var vg_fullscreen_api_1 = require("../services/vg-fullscreen-api");
var vg_utils_1 = require("./vg-utils");
describe('Videogular Player', function () {
    var medias;
    var elem;
    beforeEach(function () {
        medias = new core_1.QueryList();
        elem = {
            webkitRequestFullscreen: function () { }
        };
        vg_fullscreen_api_1.VgFullscreenAPI.isAvailable = true;
        vg_fullscreen_api_1.VgFullscreenAPI.nativeFullscreen = true;
        vg_fullscreen_api_1.VgFullscreenAPI.init(elem, medias);
    });
    it('Should create polyfills on init', function () {
        expect(vg_fullscreen_api_1.VgFullscreenAPI.polyfill.enabled).toBe('webkitFullscreenEnabled');
        expect(vg_fullscreen_api_1.VgFullscreenAPI.polyfill.element).toBe('webkitFullscreenElement');
        expect(vg_fullscreen_api_1.VgFullscreenAPI.polyfill.request).toBe('webkitRequestFullscreen');
        expect(vg_fullscreen_api_1.VgFullscreenAPI.polyfill.exit).toBe('webkitExitFullscreen');
        expect(vg_fullscreen_api_1.VgFullscreenAPI.polyfill.onchange).toBe('webkitfullscreenchange');
        expect(vg_fullscreen_api_1.VgFullscreenAPI.polyfill.onerror).toBe('webkitfullscreenerror');
    });
    it('Should request an element to enter in fullscreen mode (desktop)', function () {
        spyOn(vg_fullscreen_api_1.VgFullscreenAPI, 'enterElementInFullScreen').and.callFake(function () { });
        vg_fullscreen_api_1.VgFullscreenAPI.request(null);
        expect(vg_fullscreen_api_1.VgFullscreenAPI.isFullscreen).toBeTruthy();
        expect(vg_fullscreen_api_1.VgFullscreenAPI.enterElementInFullScreen).toHaveBeenCalledWith(elem);
    });
    it('Should request an element to enter in fullscreen mode (mobile)', function () {
        spyOn(vg_utils_1.VgUtils, 'isMobileDevice').and.callFake(function () { return true; });
        spyOn(vg_fullscreen_api_1.VgFullscreenAPI, 'enterElementInFullScreen').and.callFake(function () { });
        vg_fullscreen_api_1.VgFullscreenAPI.request(null);
        expect(vg_fullscreen_api_1.VgFullscreenAPI.isFullscreen).toBeTruthy();
        expect(vg_utils_1.VgUtils.isMobileDevice).toHaveBeenCalled();
        expect(vg_fullscreen_api_1.VgFullscreenAPI.enterElementInFullScreen).toHaveBeenCalledWith(elem);
    });
    it('Should request an element to enter in fullscreen mode (mobile with param elem)', function () {
        spyOn(vg_utils_1.VgUtils, 'isMobileDevice').and.callFake(function () { return true; });
        spyOn(vg_fullscreen_api_1.VgFullscreenAPI, 'enterElementInFullScreen').and.callFake(function () { });
        vg_fullscreen_api_1.VgFullscreenAPI.request(elem);
        expect(vg_fullscreen_api_1.VgFullscreenAPI.isFullscreen).toBeTruthy();
        expect(vg_utils_1.VgUtils.isMobileDevice).toHaveBeenCalled();
        expect(vg_fullscreen_api_1.VgFullscreenAPI.enterElementInFullScreen).toHaveBeenCalledWith(elem);
    });
    it('Should not request an element to enter in fullscreen mode', function () {
        spyOn(vg_fullscreen_api_1.VgFullscreenAPI, 'enterElementInFullScreen').and.callFake(function () { });
        vg_fullscreen_api_1.VgFullscreenAPI.nativeFullscreen = false;
        vg_fullscreen_api_1.VgFullscreenAPI.request(elem);
        expect(vg_fullscreen_api_1.VgFullscreenAPI.enterElementInFullScreen).not.toHaveBeenCalled();
    });
    it('Should enter in fullscreen mode', function () {
        spyOn(elem, 'webkitRequestFullscreen').and.callThrough();
        vg_fullscreen_api_1.VgFullscreenAPI.enterElementInFullScreen(elem);
        expect(elem.webkitRequestFullscreen).toHaveBeenCalled();
    });
    it('Should request an element to exit from fullscreen mode (native)', function () {
        vg_fullscreen_api_1.VgFullscreenAPI.polyfill.exit = 'mockedExitFunction';
        document.mockedExitFunction = function () { };
        spyOn(document, 'mockedExitFunction').and.callThrough();
        vg_fullscreen_api_1.VgFullscreenAPI.exit();
        expect(vg_fullscreen_api_1.VgFullscreenAPI.isFullscreen).toBeFalsy();
        expect(document.mockedExitFunction).toHaveBeenCalled();
    });
    it('Should request an element to exit from fullscreen mode (emulated)', function () {
        vg_fullscreen_api_1.VgFullscreenAPI.polyfill.exit = 'mockedExitFunction';
        document.mockedExitFunction = function () { };
        spyOn(document, 'mockedExitFunction').and.callThrough();
        vg_fullscreen_api_1.VgFullscreenAPI.nativeFullscreen = false;
        vg_fullscreen_api_1.VgFullscreenAPI.exit();
        expect(vg_fullscreen_api_1.VgFullscreenAPI.isFullscreen).toBeFalsy();
        expect(document.mockedExitFunction).not.toHaveBeenCalled();
    });
    it('Should enter videogular element to fullscreen mode', function () {
        vg_fullscreen_api_1.VgFullscreenAPI.videogularElement = { id: 'vgElem' };
        spyOn(vg_fullscreen_api_1.VgFullscreenAPI, 'request').and.callFake(function () { });
        vg_fullscreen_api_1.VgFullscreenAPI.toggleFullscreen();
        expect(vg_fullscreen_api_1.VgFullscreenAPI.request).toHaveBeenCalledWith(null);
    });
    it('Should enter other element to fullscreen mode', function () {
        var element = { id: 'main' };
        vg_fullscreen_api_1.VgFullscreenAPI.videogularElement = { id: 'vgElem' };
        spyOn(vg_fullscreen_api_1.VgFullscreenAPI, 'request').and.callFake(function () { });
        vg_fullscreen_api_1.VgFullscreenAPI.toggleFullscreen(element);
        expect(vg_fullscreen_api_1.VgFullscreenAPI.request).toHaveBeenCalledWith(element);
    });
    it('Should exit from fullscreen mode', function () {
        vg_fullscreen_api_1.VgFullscreenAPI.isFullscreen = true;
        spyOn(vg_fullscreen_api_1.VgFullscreenAPI, 'exit').and.callFake(function () { });
        vg_fullscreen_api_1.VgFullscreenAPI.toggleFullscreen();
        expect(vg_fullscreen_api_1.VgFullscreenAPI.exit).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;base64,